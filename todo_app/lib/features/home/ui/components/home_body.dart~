import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:todo_app/core/constants.dart';
import 'package:todo_app/features/home/data/models/task_model.dart';
import 'package:todo_app/features/home/ui/components/archived_tasks_screen.dart';
import 'package:todo_app/features/home/ui/components/done_tasks_screen.dart';
import 'package:todo_app/features/home/ui/components/new_tasks_screen.dart';
import 'package:todo_app/features/home/ui/components/widgets/bottom_sheet_body.dart';

class HomeScreenBody extends StatefulWidget {
  const HomeScreenBody({super.key});

  @override
  State<HomeScreenBody> createState() => _HomeScreenBodyState();
}

class _HomeScreenBodyState extends State<HomeScreenBody> {
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    createDatabase();
  }

  List<String> labels = ['Tasks', 'Done Tasks', 'ArchivedTasks'];

  List<Widget> screens = const [
    NewTasksScreen(),
    DoneTasksScreen(),
    ArchivedTasksScreen(),
  ];

  int currentIndex = 0;
  late Database database;
  var scaffoldKey = GlobalKey<ScaffoldState>();
  bool isBottomSheetShown = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: scaffoldKey,
      appBar: AppBar(title: Text(labels[currentIndex])),
      body:
          allTasks.isEmpty
              ? const Center(child: CircularProgressIndicator())
              : screens[currentIndex],
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          if (isBottomSheetShown) {
            if (BottomSheetBody.formKey.currentState!.validate()) {
              insertToDatabase(
                title: BottomSheetBody.title,
                date: BottomSheetBody.selectedDate,
                time: BottomSheetBody.selectedTime,
                status: 'new',
              ).then((_) {
                getData(database).then((value) {
                  allTasks= 
                  Navigator.pop(context);
                  isBottomSheetShown = !isBottomSheetShown;
                });
              });
            }
          } else {
            scaffoldKey.currentState!
                .showBottomSheet(
                  elevation: 20,
                  shape: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.deepPurple.shade100),
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(25),
                      topRight: Radius.circular(25),
                    ),
                  ),
                  (c) => BottomSheetBody(),
                )
                .closed
                .then((value) {
                  isBottomSheetShown = false;
                });
            isBottomSheetShown = true;
          }
        },
        child: Icon(Icons.add),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: currentIndex,
        onTap: (index) {
          setState(() {
            currentIndex = index;
          });
        },
        type: BottomNavigationBarType.fixed,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.menu), label: 'Tasks'),
          BottomNavigationBarItem(
            icon: Icon(Icons.check_circle_outline),
            label: 'Done ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.archive_outlined),
            label: 'Archived ',
          ),
        ],
      ),
    );
  }

  //1. create database
  //2. create tables
  //3. open database
  //4. insert in database
  //5. select from database
  //6. update database
  //7. delete database
  void createDatabase() async {
    database = await openDatabase(
      // the variable databaseObject maybe created before database, because database may take more time
      'todo.db',
      // we change the version when we change the structure of database
      version: 1,
      onCreate: (databaseObject, version) {
        //Id -> auto generate and primary key
        //Title -> String / text
        //Date -> String / text
        //Time -> String / text
        //Statue -> String / text
        databaseObject
            .execute(
              'CREATE TABLE Tasks (id INTEGER PRIMARY KEY, title TEXT, date TEXT, time TEXT , status TEXT)',
            )
            .then((value) {
              print('Database create successfully');
            })
            .catchError((error) {
              print('Error when creating database ${error.toString()}');
            });
      },
      onOpen: (database) {
        //هنا استخدمت ال database  لان التانيه بيحصلها creation بعد دي
        getData(database);
      },
    );
  }

  Future insertToDatabase({
    required String title,
    required String date,
    required String time,
    required String status,
  }) async {
    try {
      return await database.transaction((txn) async {
        int id = await txn.rawInsert(
          'INSERT INTO tasks(title, date, time, status) VALUES(?, ?, ?, ?)',
          [title, date, time, status],
        );
        print('$id inserted successfully');
      });
    } catch (error) {
      print('Insert error: ${error.toString()}');
    }
  }

  Future getData(database) async {
    List<Map<String, dynamic>> tasks = await database.rawQuery(
      'SELECT * FROM tasks',
    );
    print(tasks);
    allTasks =
        tasks.map((e) {
          return TaskModel(
            id: e['id'].toString(),
            title: e['title'],
            date: e['date'],
            time: e['time'],
            status: e['status'],
          );
        }).toList();
    return allTasks;
  }
}
